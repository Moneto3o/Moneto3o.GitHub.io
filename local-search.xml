<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>1_线性表</title>
    <link href="/2020/12/12/1-%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <url>/2020/12/12/1-%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h4>线性表的顺序存储</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-keyword">int</span> data[MAXSIZE];<br>    <span class="hljs-keyword">int</span> length;<br>&#125;sqList;<br><span class="hljs-comment">//取元素</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getElem</span><span class="hljs-params">(sqList L,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> *e)</span></span>&#123;<span class="hljs-comment">//取第i个元素</span><br>        <span class="hljs-keyword">if</span>(L.length==<span class="hljs-number">0</span>||i&lt;<span class="hljs-number">1</span>||i&gt;L.length)&#123;<span class="hljs-comment">//表空或者i不在有效位置</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERROR&quot;</span>);<br>        &#125;<br>        *e=L.data[i<span class="hljs-number">-1</span>];<span class="hljs-comment">//用指针存储</span><br>    &#125;<br><span class="hljs-comment">//插入操作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">insertList</span><span class="hljs-params">(sqList *L,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> e)</span></span>&#123; <span class="hljs-comment">//第i位插入e</span><br>        <span class="hljs-keyword">if</span>(L-&gt;length==MAXSIZE)&#123;<span class="hljs-comment">//顺序表满</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;表满无法插入&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>||i&gt;L.length+<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//i不在有效位置</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERROR&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i&lt;=L-&gt;length)&#123;<span class="hljs-comment">//可插入</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=L-&gt;length<span class="hljs-number">-1</span>;x&gt;=i<span class="hljs-number">-1</span>;x--)&#123;<span class="hljs-comment">//从第i到最后的元素都后移一位</span><br>                L-&gt;data[x+<span class="hljs-number">1</span>]=L-&gt;data[x]; <br>            &#125;<br>        &#125;<br>        L-&gt;data[i<span class="hljs-number">-1</span>]=e;<span class="hljs-comment">//对第i位进行赋值</span><br>        L-&gt;length++;<span class="hljs-comment">//表长加一</span><br>    &#125;<br><span class="hljs-comment">//删除操作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteList</span><span class="hljs-params">(sqList *L,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> *e)</span></span>&#123;<span class="hljs-comment">//删除第i位</span><br>        <span class="hljs-keyword">if</span>(L-&gt;length==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;表空&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>||i&gt;L.length+<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//i不在有效位置</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERROR&quot;</span>);<br>        &#125;<br>        *e=L-&gt;data[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">if</span>(i&lt;L-&gt;length)&#123;<span class="hljs-comment">//如果删除的不是最后一个位置</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=i;x&lt;L-&gt;length;x++)&#123;<span class="hljs-comment">//被删除元素后的元素全部前移</span><br>                L-&gt;data[x<span class="hljs-number">-1</span>]=L-&gt;data[x];<br>            &#125;<br>        &#125;<br>         L-&gt;length--;<br>    &#125;<br></code></pre></td></tr></table></figure><h4>线性表的链式存储</h4><p>0.链表的特点<br>(1)不要求用地址连续的存储空间在储，每个结点在运行时动态生成。结点的存储空间在物理位置上可以相邻，也可以不相邻;<br>(2)插入和删除操作不需要移动元素，只需修改指针，满足经常插入和删除结点的需求;<br>(3)链表不具备顺序表随机存取的优点﹔<br>(4)空间开销比较大，因链表结点增加了指示元素间关系的指针域<br>(5)链表是存储动态变化数据的理想选择。</p><p>1.单链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//无头结点插入 新插入的x作为首元结点</span><br>    s-&gt;next=head;<br>head=s;<br><br> <span class="hljs-comment">//有头结点插入</span><br>s-&gt;next=head-&gt;next;<br>head-&gt;next=s;<br><span class="hljs-comment">//遍历traverse 时间复杂度O(n)空间复杂度O(1)</span><br>Node *p=head-&gt;next;<span class="hljs-comment">//p指向首元结点</span><br><span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,p-&gt;data);<br>        p=p-&gt;next;<br>        count++;<span class="hljs-comment">//用count求表长</span><br>    &#125;<br><span class="hljs-comment">//查找 时间复杂度O(n)空间复杂度O(1)</span><br>Node *p=head-&gt;next;<br><span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;p-&gt;data!=theValue)&#123;<br>        p=p-&gt;next;<br>        count++;<br>    &#125;<br><span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br><span class="hljs-keyword">else</span>&#123;<br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;position: %d&quot;</span>,count);<br>&#125;<br><span class="hljs-comment">//插入 </span><br>pre=head;<span class="hljs-comment">//在结点p之前插入</span><br><span class="hljs-keyword">while</span>(pre!=<span class="hljs-literal">NULL</span>&amp;&amp;pre-&gt;next!=p)&#123;<br>        pre=pre-&gt;next;<br>    &#125;<br><span class="hljs-keyword">if</span>(!pre)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p结点不存在!&quot;</span>);<br>    &#125;<br>Node *s=(Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>s-&gt;data=value;<br>s-&gt;next=pre-&gt;next;<br>pre-&gt;next=s;<span class="hljs-comment">//插入新结点</span><br><span class="hljs-comment">//删除</span><br>pre=head;<span class="hljs-comment">//删除第i个结点</span><br>count=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(pre-&gt;next&amp;&amp;count&lt;i)&#123;<span class="hljs-comment">//找到第i-1个</span><br>        pre=pre-&gt;next;<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(pre-&gt;next==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;给出序号超出链表长度!&quot;</span>);<br>    &#125;<br>q=pre-&gt;next;<br>pre-&gt;next=q-&gt;next;<span class="hljs-comment">//删除</span><br><span class="hljs-built_in">free</span>(q);<span class="hljs-comment">//释放</span><br><span class="hljs-comment">//创建(头插法)</span><br><span class="hljs-comment">//创建(尾插法)</span><br><span class="hljs-comment">//逆置</span><br>Node *tmp,*p;<br>p=head-&gt;next;<span class="hljs-comment">//p指向首元结点</span><br>head-&gt;next=<span class="hljs-literal">NULL</span><span class="hljs-comment">//头结点指针置空 形成空链表</span><br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)&#123;<br>        tmp=p-&gt;next;<span class="hljs-comment">//暂存p的后继</span><br>        p-&gt;next=head-&gt;next;<span class="hljs-comment">//p插入头结点后面</span><br>        head-&gt;next=p;<br>        p=tmp;<span class="hljs-comment">//继续处理下一个结点</span><br>    &#125;<br><br></code></pre></td></tr></table></figure><p>2.双链表</p><p><img src="https://i.loli.net/2020/12/12/b3M71k2lcBr5LN6.jpg" alt="插入"></p><p><img src="https://i.loli.net/2020/12/12/lpADuRx4MjfSGYi.jpg" alt="删除"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//在p前插入s</span><br>s-&gt;prior=p-&gt;prior; <span class="hljs-comment">//1.p原先的前驱成为s的前驱</span><br>   p-&gt;prior-&gt;next=s; <span class="hljs-comment">//2.s成为p原先的前驱的后继</span><br>s-&gt;next=p;  <span class="hljs-comment">//3.s的后继是p</span><br>p-&gt;prior=s; <span class="hljs-comment">//4.修改p的前驱为s</span><br><span class="hljs-comment">//其中 4可以提前到3前 但不能到1,2前 否则会丢失结点</span><br><span class="hljs-comment">//删除p</span><br>p-&gt;prior-&gt;next=p-&gt;next;<br>p-&gt;next-&gt;prior=p-&gt;prior;<br><span class="hljs-built_in">free</span>(p);<br></code></pre></td></tr></table></figure><p>3.单循环链表 往往不带头结点 往往只设尾指针</p><p>4.双循环链表</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>0_绪论</title>
    <link href="/2020/12/12/0-%E7%BB%AA%E8%AE%BA/"/>
    <url>/2020/12/12/0-%E7%BB%AA%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p>​     <strong>数据(data)</strong>是对客观事物的符号表示。在计算机科学中是指所有能输入到计算机中并被计算机程序处理的符号的总称。</p><p>​     <strong>数据元素(data element)</strong>是数据的<u>基本单位</u>，在计算机程序中通常作为一个整体进行考虑和处理。</p><p>​     <strong>数据项(Data Item)</strong>数据项是数据的不可分割的<u>最小单位</u>。</p><p>​     <strong>数据对象(data object)</strong>是性质相同的数据元素的<u>集合</u>，是数据的一个子集。</p><p><img src="https://i.loli.net/2020/12/11/XLBtmuz6pUNMwK5.jpg"></p><p>​     <strong>如图: 数据对象由若干数据元素组成，数据元素由若干数据项组成</strong></p><p>​     <strong>数据结构(data structure)</strong>又称逻辑结构，是相互之间存在一种或多种特定关系的数据元素的集合。通常有以下四类基本结构：<u>集合</u>、<u>线性结构</u>、<u>树形结构</u>、<u>图状结构</u>。</p><p>​     <strong>存储结构（物理结构）</strong>是数据结构在计算机中的表示（又称映像）。表示数据元素之间的关联方式有:  <u>顺序存储方式</u>、<u>链式存储方式</u>、索引存储方式、散列存储方式</p><p>​     <strong>数据类型(data type)</strong>是一个值的集合和定义在这个值集上的一组操作的总称。</p><p>​     <strong>抽象数据类型(AbstractData Type)</strong>是指一个数学模型以及定义在该模型上的一组操作，可细分为：原子类型、固定聚合类型、可变聚合类型。</p><p>​     评价<strong>算法的好坏</strong>有四个方面的因素: <u>1.正确性</u> <u>2.易读性</u> <u>3.健壮性</u> <u>4.时空性</u></p><p>​     <strong>时间复杂度</strong>的计算: 找出基本操作, 估算算法的计算量</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/12/10/Hello-World/"/>
    <url>/2020/12/10/Hello-World/</url>
    
    <content type="html"><![CDATA[<p>Hiii! This is my first blog, can’t wait to share my tech ideas with u guys!</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
